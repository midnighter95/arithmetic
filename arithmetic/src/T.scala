package arithmetic

import addition.prefixadder.common._
import addition._
import addition.prefixadder._
import addition.prefixadder.graph._
import chisel3._
import float._
import os._

object GraphFromJson extends CommonPrefixSum with HasPrefixSumWithGraphImp{
  val matirx = Seq(
    Seq(1, 3, 2, 1),
    Seq(2, 1, 1, 1)
  )

  val matirx1 = Seq(
    Seq(2, 1, 2, 1, 2, 1, 2, 1),
    Seq(2, 1, 1, 1, 2, 2, 1, 1),
    Seq(2, 1, 1, 1, 2, 2, 1, 1),
    Seq(2, 1, 2, 2, 1, 1, 1, 1),
    Seq(1, 2, 1, 1, 1, 1, 1, 1)
  )

  val matirx2 = Seq(
    Seq(2, 1, 2, 1, 2, 1, 2, 1),
    Seq(2, 2, 1, 1, 2, 2, 1, 1),
    Seq(2, 2, 2, 2, 2, 2, 1, 1)
  )

  val demo = Seq(
    Seq(4, 3, 2, 1, 4, 3, 2, 1),
    Seq(2, 2, 2, 2, 1, 1, 1, 1),
  )

  val demo4 = Seq(
    Seq(4, 3, 2, 1),
  )

  val bk8 = Seq(
    Seq(2, 1, 2, 1, 2, 1, 2, 1),
    Seq(2, 1, 1, 1, 2, 2, 1, 1),
    Seq(2, 1, 2, 2, 1, 1, 1, 1),
    Seq(1, 2, 1, 1, 1, 1, 1, 1),
  )

  val matrix32 = Seq(
    Seq(4,3,2,1,  4,3,2,1,  4,3,2,1,   4,3,2,1,      4,3,2,1,  4,3,2,1,  4,1,2,1,  4,1,2,1),
    //                      完成大组内 depth = n-16
    Seq(4,4,4,4,  3,3,3,3,  2,2,2,2,   1,1,1,1,      4,4,4,4,  3,3,3,3,  1,2,1,1,  1,2,1,1), // 下半组计算完成
    //                                 结合上大组
    Seq(2,2,2,2,  2,2,2,2,  2,2,2,2,   2,2,2,2,      1,1,1,1,  1,1,1,1,  2,2,2,2,  1,1,1,1)
    //
  )

  val matrix33 = Seq(
    Seq(1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1),
    //                      完成大组内 depth = n-16
    Seq(1, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 4, 4, 4, 4, 3, 3, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1), // 下半组计算完成
    //                                 结合上大组
    Seq(3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1)
    //
  )

  val verison1 = Seq(
    Seq(1, 4, 3, 2, 1,    4, 3, 2, 1,  4, 3, 2, 1,  4, 1, 2, 1,    4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,  4, 1, 2, 1,    4, 1, 2, 1,  4, 1, 2, 1,  4, 1, 2, 1,  4, 1, 2, 1,    4, 3, 2, 1,  4, 1, 2, 1,  4, 1, 2, 1,  4, 1, 2, 1),
    Seq(1, 4, 4, 4, 4,    3, 3, 3, 3,  2, 2, 2, 2,  1, 2, 1, 1,    4, 4, 4, 4,  3, 3, 3, 3,  2, 2, 2, 2,  1, 2, 1, 1,    4, 2, 1, 1,  3, 2, 1, 1,  2, 2, 1, 1,  1, 2, 1, 1,    4, 2, 2, 2,  3, 2, 1, 1,  1, 2, 1, 1,  1, 2, 1, 1), // 下半组计算完成     结合上大组
    Seq(1, 4, 3, 3, 3,    3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3,    3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3,    2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,  1, 2, 2, 2,    1, 2, 2, 2,  1, 2, 2, 2,  2, 2, 2, 2,  1, 1, 1, 1),
    Seq(2, 1, 2, 2, 2,    2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,    1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,    1, 2, 2, 2,  1, 2, 2, 2,  1, 2, 2, 2,  2, 1, 1, 1,    1, 2, 2, 2,  1, 2, 2, 2,  1, 1, 1, 1,  1, 1, 1, 1)
  )

  val verison2 = Seq(
    Seq(1, 4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,     4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,       4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,      4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1,  4, 3, 2, 1),
    Seq(1, 4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,     4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,       4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,  4, 4, 4, 4,      4, 4, 4, 4,  3, 3, 3, 3,  2, 2, 2, 2,  4, 4, 4, 4), // 下半组计算完成     结合上大组
    Seq(4, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,     3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3,       2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,      1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1),
    Seq(2, 2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,  2, 2, 2, 2,     1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,       1, 2, 2, 2,  1, 2, 2, 2,  1, 2, 2, 2,  2, 1, 1, 1,      1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1)
  )

  val verison3 = Seq(
    Seq(1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1,      4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1,       4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1),
    Seq(1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 4),
    Seq(1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    Seq(2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
  )

  val verison4 = Seq(
    Seq(1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 1, 2, 1,     4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 1, 2, 1,    4, 1, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1,     4, 3, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1),
    Seq(1, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 2, 1, 1,     4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 2, 1, 1,    4, 2, 1, 1, 3, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1,     4, 2, 2, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1), // 下半组计算完成     结合上大组
    Seq(1, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,     3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,     1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1),
    Seq(2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,     1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,    1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1,     1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1)
  )

  val ks64 = Seq(
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,1),
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,1,1),
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 1,1,1,1),
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 1,1,1,1, 1,1,1,1),
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1),
    Seq(1,2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   2,2,2,2, 2,2,2,2, 2,2,2,2, 2,2,2,2,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1),
    Seq(2,1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,   1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1),
  )

    val newtest = Seq(
      Seq(1, 1, 1, 2, 1),
      Seq(4, 3, 2, 1, 1)
    )


  val fisher16 = Seq(
    Seq(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1),
    Seq(2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1),
    Seq(2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1),
    Seq(2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1),
  )


  val ks16 = Seq(
    Seq(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1),
    Seq(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1),
    Seq(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1),
    Seq(2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1),
  )


  val bk16 = Seq(
    Seq(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1),
    Seq(2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1),
    Seq(2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1),
    Seq(2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    Seq(1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1),
    Seq(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1)
  )




  val dotgraph: Seq[Node] = MatrixToGraph.elabroate(bk16)

  os.write.over(os.pwd / "output" / "graph.graphml", Graphml(dotgraph).toString)
  val prefixGraph: PrefixGraph = PrefixGraph(GraphToJson.elaborate(dotgraph))
}



class KSAdder64L extends Module{
  val a    = IO(Input(UInt(64.W)))
  val b    = IO(Input(UInt(64.W)))
  val cin  = IO(Input(Bool()))
  val z    = IO(Output(UInt(64.W)))
  val cout = IO(Output(Bool()))

  val aReg = RegNext(a)
  val bReg = RegNext(b)
  val cinReg = RegNext(cin)

  val m = Module(new PrefixAdderWithWrapper(GraphFromJson.prefixGraph.width - 1, GraphFromJson))
  m.a := aReg
  m.b := bReg
  m.cin := cinReg

  val zReg = RegNext(m.z)
  val coutReg = RegNext(m.cout)

  z := zReg
  cout := coutReg
}

class DemoAdder64L extends Module{
  val a    = IO(Input(UInt(64.W)))
  val b    = IO(Input(UInt(64.W)))
  val cin  = IO(Input(Bool()))
  val z    = IO(Output(UInt(64.W)))
  val cout = IO(Output(Bool()))

  val aReg = RegNext(a)
  val bReg = RegNext(b)
  val cinReg = RegNext(cin)

  val m = Module(new PrefixAdderWithWrapper(GraphFromJson.prefixGraph.width - 1, GraphFromJson))
  m.a := aReg
  m.b := bReg
  m.cin := cinReg

  val zReg = RegNext(m.z)
  val coutReg = RegNext(m.cout)

  z := zReg
  cout := coutReg
}

class AdderFromJsonNetlist extends PrefixAdderNetlist(GraphFromJson.prefixGraph.width - 1, GraphFromJson)
class AdderFromJsonWithAssert extends PrefixAdderWithAssert(GraphFromJson.prefixGraph.width - 1, GraphFromJson)
class AdderFromJsonWithWrapper extends PrefixAdderWithWrapper(GraphFromJson.prefixGraph.width - 1, GraphFromJson)



